/*
 * This file is generated by jOOQ.
 */
package com.example.daycare.infrastructure.jooq.tables.records


import com.example.daycare.infrastructure.jooq.tables.Student

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StudentRecord() : UpdatableRecordImpl<StudentRecord>(Student.STUDENT), Record4<Int?, String?, Int?, String?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var age: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var className: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, Int?, String?> = super.fieldsRow() as Row4<Int?, String?, Int?, String?>
    override fun valuesRow(): Row4<Int?, String?, Int?, String?> = super.valuesRow() as Row4<Int?, String?, Int?, String?>
    override fun field1(): Field<Int?> = Student.STUDENT.ID
    override fun field2(): Field<String?> = Student.STUDENT.NAME
    override fun field3(): Field<Int?> = Student.STUDENT.AGE
    override fun field4(): Field<String?> = Student.STUDENT.CLASS_NAME
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): Int? = age
    override fun component4(): String? = className
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): Int? = age
    override fun value4(): String? = className

    override fun value1(value: Int?): StudentRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): StudentRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): StudentRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): StudentRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: Int?, value4: String?): StudentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    constructor(id: Int? = null, name: String? = null, age: Int? = null, className: String? = null): this() {
        this.id = id
        this.name = name
        this.age = age
        this.className = className
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    constructor(value: com.example.daycare.infrastructure.jooq.tables.pojos.Student?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.age = value.age
            this.className = value.className
            resetChangedOnNotNull()
        }
    }
}
