/*
 * This file is generated by jOOQ.
 */
package com.example.daycare.infrastructure.jooq.tables.records


import com.example.daycare.infrastructure.jooq.tables.Student

import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * 保育園の園児情報を管理するテーブル
 */
@Suppress("UNCHECKED_CAST")
open class StudentRecord() : UpdatableRecordImpl<StudentRecord>(Student.STUDENT), Record7<Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var birthDate: LocalDate?
        set(value): Unit = set(2, value)
        get(): LocalDate? = get(2) as LocalDate?

    open var gender: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var classRoomId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row7<Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row7<Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row7<Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = Student.STUDENT.ID
    override fun field2(): Field<String?> = Student.STUDENT.NAME
    override fun field3(): Field<LocalDate?> = Student.STUDENT.BIRTH_DATE
    override fun field4(): Field<Int?> = Student.STUDENT.GENDER
    override fun field5(): Field<Int?> = Student.STUDENT.CLASS_ROOM_ID
    override fun field6(): Field<LocalDateTime?> = Student.STUDENT.CREATED_AT
    override fun field7(): Field<LocalDateTime?> = Student.STUDENT.UPDATED_AT
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): LocalDate? = birthDate
    override fun component4(): Int? = gender
    override fun component5(): Int? = classRoomId
    override fun component6(): LocalDateTime? = createdAt
    override fun component7(): LocalDateTime? = updatedAt
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): LocalDate? = birthDate
    override fun value4(): Int? = gender
    override fun value5(): Int? = classRoomId
    override fun value6(): LocalDateTime? = createdAt
    override fun value7(): LocalDateTime? = updatedAt

    override fun value1(value: Int?): StudentRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): StudentRecord {
        set(1, value)
        return this
    }

    override fun value3(value: LocalDate?): StudentRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): StudentRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): StudentRecord {
        set(4, value)
        return this
    }

    override fun value6(value: LocalDateTime?): StudentRecord {
        set(5, value)
        return this
    }

    override fun value7(value: LocalDateTime?): StudentRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: LocalDate?, value4: Int?, value5: Int?, value6: LocalDateTime?, value7: LocalDateTime?): StudentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    constructor(id: Int? = null, name: String? = null, birthDate: LocalDate? = null, gender: Int? = null, classRoomId: Int? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.birthDate = birthDate
        this.gender = gender
        this.classRoomId = classRoomId
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    constructor(value: com.example.daycare.infrastructure.jooq.tables.pojos.Student?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.birthDate = value.birthDate
            this.gender = value.gender
            this.classRoomId = value.classRoomId
            this.createdAt = value.createdAt
            this.updatedAt = value.updatedAt
            resetChangedOnNotNull()
        }
    }
}
