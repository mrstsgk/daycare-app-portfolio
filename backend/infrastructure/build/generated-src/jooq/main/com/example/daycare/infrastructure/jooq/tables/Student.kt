/*
 * This file is generated by jOOQ.
 */
package com.example.daycare.infrastructure.jooq.tables


import com.example.daycare.infrastructure.jooq.Public
import com.example.daycare.infrastructure.jooq.keys.STUDENT_PKEY
import com.example.daycare.infrastructure.jooq.keys.STUDENT__STUDENT_CLASS_ROOM_ID_FKEY
import com.example.daycare.infrastructure.jooq.tables.records.StudentRecord

import java.time.LocalDate
import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * 保育園の園児情報を管理するテーブル
 */
@Suppress("UNCHECKED_CAST")
open class Student(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StudentRecord>?,
    aliased: Table<StudentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StudentRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("保育園の園児情報を管理するテーブル"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.student</code>
         */
        val STUDENT: Student = Student()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StudentRecord> = StudentRecord::class.java

    /**
     * The column <code>public.student.id</code>. 園児ID（主キー）
     */
    val ID: TableField<StudentRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "園児ID（主キー）")

    /**
     * The column <code>public.student.name</code>. 園児名
     */
    val NAME: TableField<StudentRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "園児名")

    /**
     * The column <code>public.student.birth_date</code>. 生年月日
     */
    val BIRTH_DATE: TableField<StudentRecord, LocalDate?> = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE.nullable(false), this, "生年月日")

    /**
     * The column <code>public.student.gender</code>. 性別（1=男、2=女）
     */
    val GENDER: TableField<StudentRecord, Int?> = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false), this, "性別（1=男、2=女）")

    /**
     * The column <code>public.student.class_room_id</code>. 所属クラスID（外部キー）
     */
    val CLASS_ROOM_ID: TableField<StudentRecord, Int?> = createField(DSL.name("class_room_id"), SQLDataType.INTEGER, this, "所属クラスID（外部キー）")

    /**
     * The column <code>public.student.created_at</code>. 作成日時
     */
    val CREATED_AT: TableField<StudentRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "作成日時")

    /**
     * The column <code>public.student.updated_at</code>. 更新日時
     */
    val UPDATED_AT: TableField<StudentRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "更新日時")

    private constructor(alias: Name, aliased: Table<StudentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StudentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.student</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.student</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.student</code> table reference
     */
    constructor(): this(DSL.name("student"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StudentRecord>): this(Internal.createPathAlias(child, key), child, key, STUDENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<StudentRecord, Int?> = super.getIdentity() as Identity<StudentRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<StudentRecord> = STUDENT_PKEY
    override fun getReferences(): List<ForeignKey<StudentRecord, *>> = listOf(STUDENT__STUDENT_CLASS_ROOM_ID_FKEY)

    private lateinit var _classRoom: ClassRoom

    /**
     * Get the implicit join path to the <code>public.class_room</code> table.
     */
    fun classRoom(): ClassRoom {
        if (!this::_classRoom.isInitialized)
            _classRoom = ClassRoom(this, STUDENT__STUDENT_CLASS_ROOM_ID_FKEY)

        return _classRoom;
    }

    val classRoom: ClassRoom
        get(): ClassRoom = classRoom()
    override fun `as`(alias: String): Student = Student(DSL.name(alias), this)
    override fun `as`(alias: Name): Student = Student(alias, this)
    override fun `as`(alias: Table<*>): Student = Student(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Student = Student(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Student = Student(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Student = Student(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row7<Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, LocalDate?, Int?, Int?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
